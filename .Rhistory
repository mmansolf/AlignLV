load_all()
library(devtools)
load_all()
load_all()
load_all()
getEstimates.mirt
usethis::use_testthat(3)
load_all()
getwd()
source('tests/testthat/test_all_functions.R')
load_all()
document()
check()
check()
load_all()
getEstimates.mirt
?getEstimates.mirt
devtools::document()
devtools::document()
devtools::document()
Alignment
library(devtools)
build()
build()
source("C:/Users/Max/Dropbox/RPackages/AlignLV/tests/testthat/test_all_functions.R", echo=TRUE)
x=1
rm(x)
use_package('abind',type='imports')
document()
build()
use_package('mirt',type='imports')
use_package('lavaan',type='imports')
use_package('tidyverse',type='imports')
document()
build()
loadEstimates.mirt.grm
library(devtools)
check()
?check
?suggests
?suggest
library(devtools)
?suggest
?suggests
?warning
?include
use_pipe(export=T)
?quantile
?combn
build()
document()
check()
?makeCluster
?foreach
??foreach
?stopCluster
use_mit_license('Maxwell Mansolf')
build()
document()
check()
check()
??expand.table
?use_package
use_package(c('foreach','purrr','car','lavaan','mirt'))
use_package(c('foreach','purrr','car','lavaan','mirt'))
use_package('foreach','Suggests')
use_package('purrr')
?mirt
library(semTools)
?cfa.mi
?transpose
build()
document()
check()
use_package('stats')
?setNames
build()
build()
build()
document()
check()
check()
use_package('doParallel','Suggests')
?registerDoParallel
?bind_cols
??bind_cols
use_package('dplyr')
?rownames_to_column
use_packages('tibble')
use_package('tibble')
?left_join
?pivot_wider
??pivot_wider
use_package('tidyr')
?bind_rows
?check
build()
document()
check()
build()
document()
check()
build()
document()
check()
?use_pipe
use_pipe
build()
document()
check()
check()
check()
document()
check()
#' library(mirt)
#' library(lavaan)
#' library(purrr)
#' library(tibble)
#' library(magrittr)
#' dat=expand.table(Bock1997)
#' #fit configural models
#' fit.mirt=mirt(dat,1,SE=TRUE)
#' fit.lavaan=cfa(model='G =~ Item.1+Item.2+Item.3',data=dat,
#'                ordered=c('Item.1','Item.2','Item.3'),
#'                std.lv=TRUE,parameterization='delta')
#' fit.lavaan@ParTable%>%tibble::as_tibble()%>%print(n=Inf)
library(mirt)
library(lavaan)
library(purrr)
library(tibble)
library(magrittr)
dat=expand.table(Bock1997)
#fit configural models
fit.mirt=mirt(dat,1,SE=TRUE)
fit.lavaan=cfa(model='G =~ Item.1+Item.2+Item.3',data=dat,
ordered=c('Item.1','Item.2','Item.3'),
std.lv=TRUE,parameterization='delta')
fit.lavaan@ParTable%>%tibble::as_tibble()%>%print(n=Inf)
library(mirt)
library(lavaan)
library(purrr)
library(tibble)
library(magrittr)
dat=expand.table(Bock1997)
#fit configural models
fit.mirt=mirt(dat,1,SE=TRUE)
fit.lavaan=cfa(model='G =~ Item.1+Item.2+Item.3',data=dat,
ordered=c('Item.1','Item.2','Item.3'),
std.lv=TRUE,parameterization='delta')
fit.lavaan@ParTable%>%tibble::as_tibble()%>%print(n=Inf)
library(usethis)
check()
library(devtools)
check()
check()
check()
check()
check()
check()
check()
check()
run_examples()
check()
check()
check()
run_examples()
run_examples()
run_examples()
check()
check()
build()
check()
run_examples()
rlang::last_trace()
test.stack
library(mirt)
library(lavaan)
library(purrr)
library(tibble)
library(magrittr)
dat=expand.table(Bock1997)
#fit configural models
fit.mirt=mirt(dat,1,SE=TRUE)
fit.lavaan=cfa(model='G =~ Item.1+Item.2+Item.3',data=dat,
ordered=c('Item.1','Item.2','Item.3'),
std.lv=TRUE,parameterization='delta')
(fit.lavaan@ParTable)%>%tibble::as_tibble()%>%print(n=Inf)
#test stuff
tab=fit.lavaan@ParTable
tab$start[23]=3
tab$est[23]=3
fit.lavaan2=lavaan(tab,data=fit.lavaan@Data)
#'
#get estimates
est.mirt=getEstimates.mirt(fit.mirt,SE=FALSE,bifactor.marginal=FALSE)
est.lavaan=getEstimates.lavaan(fit.lavaan,SE=FALSE)
#'
#test transformations
newMean=10
newVar=2
test.mirt=transformEstimates.mirt.grm(newMean,newVar,est.mirt)
test.lavaan=transformEstimates.lavaan.ordered(
newMean,newVar,est.lavaan,toCompare=FALSE)
#load and test equivalence
tfit.mirt=loadEstimates.mirt.grm(fit.mirt,newMean,newVar,newpars=test.mirt)
test.mirt=mirt::coef(fit.mirt)
test.mirt
tfit.lavaan=loadEstimates.lavaan.ordered(
fit.lavaan,newMean,newVar,newpars=test.lavaan)
tfit.lavaan@ParTable%>%tibble::as_tibble()%>%print(n=Inf)
test.lavaan
#now on stacked estimates
estList=list(est.mirt%>%purrr::imap(function(x,n){
rownames(x)[2]=paste0(rownames(x)[2],'_ho')
if(!n%in%c('a','se.a'))colnames(x)[2]=paste0(colnames(x)[2],'_ho')
x
}),est.mirt%>%purrr::imap(function(x,n){
rownames(x)[1]=paste0(rownames(x)[1],'_hi')
if(!n%in%c('a','se.a'))colnames(x)[1]=paste0(colnames(x)[1],'_hi')
x
}))
est.mirt
#now on stacked estimates
estList=list(est.mirt[1:2]%>%purrr::imap(function(x,n){
rownames(x)[2]=paste0(rownames(x)[2],'_ho')
if(!n%in%c('a','se.a'))colnames(x)[2]=paste0(colnames(x)[2],'_ho')
x
}),est.mirt[1:2]%>%purrr::imap(function(x,n){
rownames(x)[1]=paste0(rownames(x)[1],'_hi')
if(!n%in%c('a','se.a'))colnames(x)[1]=paste0(colnames(x)[1],'_hi')
x
}))
stack=stackEstimates(estList)
test.stack=transformEstimates.mirt.grm(c(0,0),c(1,1),stack)
sf.stack=SF.mplus3D(c(0,1),stack,combn(1:2,2),c(100,200),'mirt.grm',
eps.alignment=0.01,
clf.ignore.quantile=0.1)
test.stack2=transformEstimates.mirt.grm(c(0,1),c(1,1/2),stack)
run_examples()
check()
usethis::use_citation()
?lavaan
check()
check()
run_examples()
run_examples()
check()
run_examples()
build()
run_examples()
build()
run_examples()
check()
check()
run_examples()
align.stack
load_all()
source("~/.active-rstudio-document", echo=TRUE)
align.stack
fit.align$est
check()
check()
document()
check()
load_all()
?SF.mplus3D
check()
build()
build()
document()
check()
check()
use_import_from('rlang','.data')
check()
check()
check()
check()
check()
?Alignment
load_all()
load_all()
check()
check()
check()
install.packages(c("abind", "admisc", "aorsf", "arm", "arrow", "askpass", "backports", "bayestestR", "BH", "bitops", "brew", "brglm2", "broom", "broom.helpers", "broom.mixed", "bslib", "cachem", "car", "caret", "caTools", "checkmate", "cli", "coda", "coin", "collapse", "colorspace", "commonmark", "cowplot", "cpp11", "credentials", "crosstalk", "curl", "data.table", "datawizard", "DBI", "dbplyr", "deldir", "Deriv", "DescTools", "DiagrammeR", "digest", "downlit", "e1071", "effectsize", "emmeans", "estimability", "Exact", "expm", "farver", "fastDummies", "fastmap", "fastshap", "flextable", "Formula", "fs", "furrr", "future", "gdata", "gdtools", "gert", "GGally", "ggdendro", "ggforce", "ggformula", "ggh4x", "ggplot2", "ggrepel", "ggridges", "ggstance", "gh", "gld", "glmnet", "glue", "gmm", "gmp", "gower", "gt", "gtools", "gtsummary", "hardhat", "haven", "highr", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "interp", "inum", "ipred", "jomo", "jpeg", "kableExtra", "knitr", "labeling", "labelled", "later", "lava", "lavaan", "lavaanPlot", "leaflet", "leaflet.providers", "libcoin", "lme4", "lmom", "lpSolve", "maps", "markdown", "MatrixModels", "matrixStats", "MBESS", "mcmc", "MCMCpack", "meta", "metafor", "mice", "miceadds", "minqa", "mirt", "mirtCAT", "mitml", "MKdescr", "MKinfer", "mlbench", "mosaic", "mosaicCore", "mosaicData", "MplusAutomation", "multcomp", "munsell", "mvnfast", "mvtnorm", "nleqslv", "nloptr", "officer", "OpenMx", "openssl", "openxlsx", "ordinal", "pan", "parallelly", "parameters", "party", "partykit", "patchwork", "pbkrtest", "pbv", "PearsonDS", "performance", "pkgdown", "plotrix", "plyr", "png", "polyclip", "prettyunits", "prodlim", "profvis", "progress", "promises", "PROsetta", "pryr", "ps", "psych", "quantreg", "ragg", "ranger", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "recipes", "rematch", "remotes", "reprex", "rJava", "rjson", "rlang", "rmarkdown", "rootSolve", "roxygen2", "rpart.plot", "rpf", "rsem", "rstudioapi", "rvest", "sandwich", "sass", "scales", "sem", "semtree", "sets", "shape", "shiny", "SimDesign", "sirt", "smcfcs", "sourcetools", "sp", "SparseM", "StanHeaders", "statmod", "stringi", "stringr", "strucchange", "styler", "svglite", "systemfonts", "TAM", "terra", "texreg", "textshaping", "TH.data", "tidyr", "timechange", "timeDate", "tinytex", "tmvtnorm", "tweenr", "tzdb", "ucminf", "usethis", "uuid", "vegan", "VGAM", "viridis", "vroom", "waldo", "whisker", "withr", "xfun", "xml2", "xopen", "yaml", "zip", "zoo"))
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"), lib="C:/Program Files/R/R-4.2.1/library")
install.packages(c("aorsf", "bslib", "cachem", "cli", "colorspace", "curl", "digest", "fastmap", "fs", "glue", "Hmisc", "htmlTable", "htmltools", "httpuv", "later", "mirt", "profvis", "promises", "ps", "Rcpp", "readr", "rlang", "shiny", "stringi", "terra", "tidyr", "timechange", "tzdb", "vegan"))
install.packages(c("cluster", "lattice", "mgcv", "nlme"), lib="C:/Program Files/R/R-4.2.1/library")
getwd()
library(devtools)
install.packages('htmltools')
detach("package:htmltools", unload=TRUE)
detach("htmltools", unload=TRUE)
?detach
remove.packages("htmltools")
install.packages('htmltools')
install.packages('devtools')
library(devtools)
build)()
build()
check()
library(versions)
install.packages('versions')
install.versions('roxygen2','7.2.1')
library(versions)
install.versions('roxygen2','7.2.1')
packageurl <- "http://cran.r-project.org/src/contrib/Archive/roxygen2/roxygen2_7.2.1.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
check()
use_citation()
use_citation()
check()
check()\
check()\
check()
check()
build()
document()
build()
document()
build()
library(updateR)
library(updater)
install.packages("installr")
library(installr)
updateR()
library(devtools)
build()
document()
check()
pkgbuild::check_build_tools(debug = TRUE)
build()
check()
check()
?abind
check()
library(devtools)
check()
codetools::checkUsagePackage()
?codetools::checkUsagePackage
check()
check()
check()
check()
check()
check()
check()
build()
document()
build()
library(devtools)
check()
document()
build()
check()
document()
build()
